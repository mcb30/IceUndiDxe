// /**************************************************************************
// 
// Copyright (c) 2016-2021, Intel Corporation. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Intel Corporation nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// ***************************************************************************/

form  formid = FORM_NIC,
      title  = STRING_TOKEN(STR_NIC_CONFIG_MENU);

  text
    help   = STRING_TOKEN(STR_INV_EMPTY_STRING),
    text   = STRING_TOKEN(STR_INV_EMPTY_STRING),
    text   = STRING_TOKEN(STR_INV_EMPTY_STRING),
    flags  = 0,
    key    = 0;


  //
  // Add a separation line
  //
  text
    help   = STRING_TOKEN(STR_INV_EMPTY_STRING),
    text   = STRING_TOKEN(STR_INV_EMPTY_STRING),
    text   = STRING_TOKEN(STR_INV_EMPTY_STRING),
    flags  = 0,
    key    = 0;

  suppressif NOT_SUPPORTED (LINK_SPEED);
    grayoutif RD_ONLY (LINK_SPEED);
    //
    // Empty line
    //
    text
      help   = STRING_TOKEN(STR_INV_EMPTY_STRING),
      text   = STRING_TOKEN(STR_INV_EMPTY_STRING),
      text   = STRING_TOKEN(STR_INV_EMPTY_STRING),
      flags  = 0,
      key    = 0;

      oneof name        = LinkSpeed,
          varid         = NicCfgData.LinkSpeed,
          questionid    = QUESTION_ID_LINK_SPEED,
          prompt        = STRING_TOKEN(STR_LINK_SPEED_PROMPT),
          help          = STRING_TOKEN(STR_LINK_SPEED_HELP),
          flags         = 0,
          option text   = STRING_TOKEN(STR_AUTONEG_TEXT), value = LINK_SPEED_AUTO_NEG,  flags = DEFAULT;

          suppressif RD_ONLY (LINK_SPEED);
            option text = STRING_TOKEN(STR_100FULL_TEXT),  value = LINK_SPEED_100FULL,  flags = 0;
          endif;

      endoneof;
    endif; /* RO LINK_SPEED */
  endif; /* LINK_SPEED */

  suppressif TRUE;
    numeric name          = DefaultWolStatus,
            varid         = NicCfgData.DefaultWolStatus,
            questionid    = QUESTION_ID_DEFAULT_WOL,
            prompt        = STRING_TOKEN(STR_INV_EMPTY_STRING),
            help          = STRING_TOKEN(STR_INV_EMPTY_STRING),
            flags         = READ_ONLY,
            minimum       = 0,
            maximum       = 2,
            default value = questionref(DefaultWolStatus),
    endnumeric;
  endif;

  grayoutif ideqval NicCfgData.WolStatus == WOL_NA;
    oneof varid         = NicCfgData.WolStatus,
          questionid    = QUESTION_ID_WOL,
          prompt        = STRING_TOKEN(STR_WOL_TEXT),
          help          = STRING_TOKEN(STR_WOL_HELP),
          flags         = 0,
          default value = questionref(DefaultWolStatus),

          suppressif ideqval NicCfgData.WolStatus == WOL_NA;
            option text = STRING_TOKEN(STR_DISABLED_TEXT), value = WOL_DISABLE, flags = 0;
            option text = STRING_TOKEN(STR_ENABLED_TEXT),  value = WOL_ENABLE,  flags = 0;
          endif

          suppressif NOT ideqval NicCfgData.WolStatus == WOL_NA;
            option text = STRING_TOKEN(STR_NA_TEXT),       value = WOL_NA,      flags = 0;
          endif
    endoneof;
  endif; // grayoutif




#if UNDI_ICE
  //
  // LLDP Agent
  //
  suppressif TRUE;
    numeric name          = DefaultLLDPAgent,
            varid         = NicCfgData.DefaultLldpAgentStatus,
            questionid    = QUESTION_ID_LLDP_AGENT_DEAULT,
            prompt        = STRING_TOKEN(STR_INV_EMPTY_STRING),
            help          = STRING_TOKEN(STR_INV_EMPTY_STRING),
            flags         = READ_ONLY,
            minimum       = 0,
            maximum       = 1,
            default value = questionref(DefaultLLDPAgent),
    endnumeric;
  endif; //TRUE

  suppressif NOT_SUPPORTED (LLDP_AGENT);
      oneof name      = LLDPAgent,
        varid         = NicCfgData.LldpAgentStatus,
        questionid    = QUESTION_ID_LLDP_AGENT,
        prompt        = STRING_TOKEN (STR_LLDP_AGENT_TEXT),
        help          = STRING_TOKEN (STR_LLDP_AGENT_HELP),
        flags         = 0,
        default value = questionref(DefaultLLDPAgent),

        option text = STRING_TOKEN (STR_DISABLED_TEXT), value = DISABLED, flags = 0;
        option text = STRING_TOKEN (STR_ENABLED_TEXT),  value = ENABLED,  flags = 0;

      endoneof;
  endif; /* LLDP_AGENT */
#endif // UNDI_40G || UNDI_ICE

endform;
